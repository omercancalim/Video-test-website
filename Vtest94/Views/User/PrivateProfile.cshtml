@model Vtest94.Models.User

@{
    ViewData["Title"] = "User Profile";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Main/Middle/Profile.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        var defaultProfileImageSrc = "@Url.Content($"~/UserPhotos/{Model.Id}/profile.jpg?v=" + DateTime.Now.Ticks)";
    </script>
    <script type="text/javascript" src="~/js/Main/Middle/PrivateProfile.js"></script>
}

<div class="h-100">
    <div class="text-white">
        <div class="profile-header-image">
            <img src="https://picsum.photos/1000/500" alt="Alternate Text" />
        </div>
        <div class="d-flex flex-row">
            <div>
                <img src="@Url.Content($"~/UserPhotos/{Model.Id}/profile.jpg?v=" + DateTime.Now.Ticks)" alt="@Model.ArbitraryUsername" class="custom-circle-img">
            </div>
            <div class="ms-4">
                <div class="d-flex flex-row align-items-center">
                    <h2>@Model.ArbitraryUsername</h2>
                    <button id="uploadPhotoBtn">
                        <i class="fa-regular fa-pen-to-square"></i>
                    </button>
                </div>
                <p><span>230k subscribers</span> ~ <span>@Model.Videos.Count videos</span></p>
                <p>Email: @Model.Email</p>
            </div>
        </div>
        <div class="card-body p-4" style="border-bottom-left-radius:6px; border-bottom-right-radius:6px;">
            <div class="mb-4">
                <p class="lead fw-normal mb-0">Recent Videos</p>
            </div>
            <div class="row g-3">
                @foreach (var video in Model.Videos)
                {
                    <div class="col-12 col-md-4 col-lg-3">
                        <a asp-controller="Video" asp-action="SelectedVideo" asp-route-videoId="@video.Id" title="@video.Title">
                            <div style="position: relative;">
                                <img src="@Url.Content($"~/thumbnails/{video.ThumbnailName}")" alt="@video.Title" class="w-100 rounded-3">
                                <div class="duration-box">@FormatDuration(video.Duration)</div>
                            </div>
                        </a>
                        <a asp-controller="Video" asp-action="SelectedVideo" asp-route-videoId="@video.Id" title="@video.Title">
                            <p class="profile-video-description">@video.Title</p>
                        </a>
                        <p class="profile-video-info">@FormatViewCount((int)video.VideoStats.ViewCount) view ~ @GetRelativeTime(video.UploadedDate)</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal for uploading photo -->
<div class="modal fade" id="uploadPhotoModal" tabindex="-1" role="dialog" aria-labelledby="uploadPhotoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bg-dark">
            <div class="modal-body">
                <div class="upload-container">
                    <div class="custom-file-input">
                        <input type="file" id="fileInput" accept="image/*">
                        <label for="fileInput" class="custom-choose-photo">
                            <img id="profileImage" src="@Url.Content($"~/UserPhotos/{Model.Id}/profile.jpg?v=" + DateTime.Now.Ticks)" alt="Choose Photo">
                            <div class="custom-photo-overlay">Change Photo</div>
                        </label>
                    </div>
                </div>
                <div class="username-container mt-3">
                    <label for="usernameInput">Username</label>
                    <input type="text" id="usernameInput" class="form-control text-white" value="@Model.ArbitraryUsername">
                    <span id="usernameError" class="text-danger" style="display: none;">Username cannot be empty.</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="savePhotoBtn">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for cropping photo -->
<div class="modal" id="cropPhotoModal" tabindex="-1" role="dialog" aria-labelledby="cropPhotoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content bg-dark">
            <div class="modal-body">
                <div class="crop-container d-flex">
                    <img id="imageToCrop" src="" alt="Image to Crop">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveCroppedPhotoBtn">Crop</button>
            </div>
        </div>
    </div>
</div>

<!-- Setting success -->
<div id="popupInfoBox">Settings saved <i class="fa-solid fa-check"></i></div>

@functions {
    // Helper method to format TimeSpan
    private static string FormatDuration(TimeSpan duration)
    {
        if (duration.Days > 0)
        {
            // Format string for durations with days
            return string.Format("{0}:{1:D2}:{2:D2}:{3:D2}", duration.Days, duration.Hours, duration.Minutes, duration.Seconds);
        }
        else if (duration.Hours > 0)
        {
            // Format string for durations with hours
            return string.Format("{0}:{1:D2}:{2:D2}", duration.Hours, duration.Minutes, duration.Seconds);
        }
        else
        {
            // Format string for durations less than an hour
            return string.Format("{0}:{1:D2}", duration.Minutes, duration.Seconds);
        }
    }

    // Helper method to get relative time
    private static string GetRelativeTime(DateTime dateTime)
    {
        var currentTime = DateTime.UtcNow;
        var timeSpan = currentTime.Subtract(dateTime);

        // Debugging: Print currentTime and dateTime
        System.Diagnostics.Debug.WriteLine($"Current Time (UTC): {currentTime}");
        System.Diagnostics.Debug.WriteLine($"Uploaded Date (UTC): {dateTime.ToUniversalTime()}");
        System.Diagnostics.Debug.WriteLine($"Time Span: {timeSpan}");

        if (timeSpan <= TimeSpan.FromSeconds(60))
        {
            return "just now";
        }
        else if (timeSpan <= TimeSpan.FromMinutes(60))
        {
            return $"{timeSpan.Minutes} minutes ago";
        }
        else if (timeSpan <= TimeSpan.FromHours(24))
        {
            return $"{timeSpan.Hours} hours ago";
        }
        else if (timeSpan <= TimeSpan.FromDays(30))
        {
            return $"{timeSpan.Days} days ago";
        }
        else if (timeSpan <= TimeSpan.FromDays(365))
        {
            return $"{timeSpan.Days / 30} months ago";
        }
        else
        {
            return $"{timeSpan.Days / 365} years ago";
        }
    }

    public string FormatViewCount(int viewCount)
    {
        if (viewCount >= 1_000_000_000)
        {
            return (viewCount / 1_000_000_000.0).ToString("0.#") + "B";
        }
        else if (viewCount >= 1_000_000)
        {
            return (viewCount / 1_000_000.0).ToString("0.#") + "M";
        }
        else if (viewCount >= 10_000)
        {
            return (viewCount / 1_000.0).ToString("0.#") + "K";
        }
        else
        {
            return viewCount.ToString();
        }
    }
}